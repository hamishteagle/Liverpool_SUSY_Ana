#include <iostream>
#include <fstream>
#include <sstream>
#include <map>
#include <algorithm>
#include <vector>
#include <string>
#include <iterator>
//Class to convert text file in format; line by line=DSID, SF, Xsec, Kfactor, FilterEff, Rel.uncertainty 
//into maps mapping each DSID to each attribute

int makeMap () {
  using namespace std;

  map <int, double> xSecMap;
  map <int, double> kFacMap;
  map <int, double> filterEffMap;
  map <int, double> relUncertMap;
  map <int, double> SFMap;
  

  vector<double> mapValues;
  ifstream file;
  file.open("MGPy8EG_A14N23LO_BB_onestepN2hN1.txt");
  string inputline;
  while(getline(file, inputline)){
    //  cout<<"Line = "<<inputline<<endl;
    istringstream iss(inputline);
    copy(istream_iterator<double>(iss),
	 istream_iterator<double>(),
	 back_inserter(mapValues));
    cout<<"mapValues= "<<mapValues[0]<<","<<mapValues[1]<<","<<mapValues[2]<<","<<endl;    

    SFMap[mapValues[0]] = mapValues[1];
    xSecMap[mapValues[0]] = mapValues[2];
    kFacMap[mapValues[0]] = mapValues[3];
    filterEffMap[mapValues[0]] = mapValues[4];
    relUncertMap[ma[Values[0]] = mapValues[5];
    mapValues.clear();
  }
  return 0;
}

  //Functions to return the attributes of each DSID

double getCrossSection(int datasetID){
  cout<<xSecMap[datasetID]<<endl;
  return xSecMap[datasetID];
}

double getFilterEff(int datasetID){
  cout<<filterEffMap[datasetID]<<endl;
  return filterEffMap[datasetID];
}

double getKFactor(int datasetID){
  cout<<filterEffMap[datasetID]<<endl;
  return myMap[datasetID];
}

int main(){

  int datasetID = 300000;

  double xSec = getCrossSection(datasetID);
  double filterEff = getFilterEff(datasetID);
  double kFactor = getKFactor(datasetID);

  std::cout << xSec << ", " << filterEff << ", " << kFactor << std::endl; 

  return 0;
}
